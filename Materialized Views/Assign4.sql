--A4
--MANUEL LOPEZ

--IN THIS ASSIGNMENTS THE TASK IS TO SIMULATE THE OPERATION OF A NEVER STALE 
--MATERIALIZED VIEW WITH THE USE OF TRIGGERS 


--TABLE CREATION
DROP TABLE MLMV;

CREATE TABLE MLMV AS (
SELECT F.F_ID, F.F_LAST, F.F_FIRST, F.F_MI, LOC_ID, F_PHONE, F_RANK, F_SUPER, F_PIN, S_ID, S_LAST, S_FIRST, S_MI, 
S_ADDRESS, S_CITY, S_STATE, S_ZIP, S_PHONE, S.S_CLASS, S.S_DOB, S_PIN, S.TIME_ENROLLED
FROM FACULTY F LEFT OUTER JOIN STUDENT S ON(F.F_ID = S.F_ID));


--TRIGGERS FACULTY TABLE
--INSERT
CREATE OR REPLACE TRIGGER INSERT_AFTER_FACULTY
AFTER INSERT ON FACULTY
FOR EACH ROW
BEGIN
    INSERT INTO MLMV
    VALUES(:NEW.F_ID, :NEW.F_LAST, :NEW.F_FIRST, :NEW.F_MI, :NEW.LOC_ID,
      :NEW.F_PHONE, :NEW.F_RANK, :NEW.F_SUPER, :NEW.F_PIN,
      NULL, NULL, NULL, NULL, NULL,
      NULL, NULL, NULL, NULL, NULL,
      NULL, NULL, NULL);
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred. INSERT_AFTER_FACULTY');
END;
/
--UPDATE
CREATE OR REPLACE TRIGGER UPDATE_AFTER_FACULTY
AFTER UPDATE ON FACULTY
FOR EACH ROW
BEGIN

    UPDATE MLMV
      SET F_ID = :NEW.F_ID,
          F_LAST = :NEW.F_LAST,
          F_FIRST = :NEW.F_FIRST,
          F_MI = :NEW.F_MI,
          LOC_ID = :NEW.LOC_ID,
          F_PHONE = :NEW.F_PHONE,
          F_RANK = :NEW.F_RANK,
          F_SUPER = :NEW.F_SUPER,
          F_PIN = :NEW.F_PIN
          
      WHERE F_ID = :OLD.F_ID;
    
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred. INSERT_AFTER_FACULTY');
END;
/
--DELETE
CREATE OR REPLACE TRIGGER DELETE_AFTER_FACULTY
AFTER DELETE ON FACULTY
FOR EACH ROW
BEGIN

  DELETE FROM MLMV WHERE F_ID = :OLD.F_ID;
    
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred. DELETE_AFTER_FACULTY');
END;



--TRIGGERS STUDENT TABLE
--INSERT
/

CREATE OR REPLACE TRIGGER INSERT_AFTER_STUDENT
AFTER INSERT ON STUDENT
FOR EACH ROW
DECLARE
    CURSOR CUR(FACULTY_ID IN INTEGER) IS
      SELECT * FROM FACULTY WHERE F_ID = FACULTY_ID;
    CUR_ROW CUR%ROWTYPE;
    
    CURSOR CUR_MV(FACULTY_ID IN INTEGER) IS
      SELECT * FROM MLMV WHERE F_ID = FACULTY_ID;
    CUR_MV_ROW CUR_MV%ROWTYPE;  
      
BEGIN

  OPEN CUR(:NEW.F_ID);
      FETCH CUR INTO CUR_ROW;
      --MEANS FOUND A MATCH IN FACULTY 
      IF CUR%FOUND THEN

      
          --IF HAS A NULL S_ID IN THE ROW MEANS DIDNT HAVE STUDENT THEN 
          --NEED TO REMOVE THAT ROW 
          OPEN CUR_MV(:NEW.F_ID);
            FETCH CUR_MV INTO CUR_MV_ROW;
            
              --IF THE S_ID IS NULL MEANS WAS A TEACHER WITHOUT STUDENT TO TUTOR
              IF CUR_MV_ROW.S_ID IS NULL THEN
                DELETE FROM MLMV WHERE F_ID = :NEW.F_ID;
              END IF;
            
          CLOSE CUR_MV;  


        INSERT INTO MLMV
        VALUES(CUR_ROW.F_ID, CUR_ROW.F_LAST, CUR_ROW.F_FIRST, CUR_ROW.F_MI, CUR_ROW.LOC_ID,
          CUR_ROW.F_PHONE, CUR_ROW.F_RANK, CUR_ROW.F_SUPER, CUR_ROW.F_PIN,
          :NEW.S_ID, :NEW.S_LAST, :NEW.S_FIRST, :NEW.S_MI, :NEW.S_ADDRESS,
          :NEW.S_CITY, :NEW.S_STATE, :NEW.S_ZIP, :NEW.S_PHONE, :NEW.S_CLASS,
          :NEW.S_DOB, :NEW.S_PIN, :NEW.TIME_ENROLLED);
      
      END IF;
  CLOSE CUR;
      
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred. INSERT_AFTER_STUDENT');
END;




--UPDATE
/

CREATE OR REPLACE TRIGGER UPDATE_AFTER_STUDENT
AFTER UPDATE ON STUDENT
FOR EACH ROW
DECLARE
    CURSOR CUR(FACULTY_ID IN INTEGER) IS
      SELECT * FROM FACULTY WHERE F_ID = FACULTY_ID;
    CUR_ROW CUR%ROWTYPE;
    
    OLD_ACTION VARCHAR2(10) := '';
    NEW_ACTION VARCHAR2(10) := '';
BEGIN

    OPEN CUR(:NEW.F_ID);
    FETCH CUR INTO CUR_ROW; 

    IF :OLD.F_ID = :NEW.F_ID THEN
      --UPDATING STUDENT WHEN NOT F_ID WAS CHANGED
      UPDATE MLMV
        SET S_ID = :NEW.S_ID,
            S_LAST = :NEW.S_LAST,
            S_FIRST = :NEW.S_FIRST,
            S_MI = :NEW.S_MI,
            S_ADDRESS = :NEW.S_ADDRESS,
            S_CITY = :NEW.S_CITY,
            S_STATE = :NEW.S_STATE,
            S_ZIP = :NEW.S_ZIP,
            S_PHONE = :NEW.S_PHONE,
            S_CLASS = :NEW.S_CLASS,
            S_DOB = :NEW.S_DOB,
            S_PIN = :NEW.S_PIN,
            TIME_ENROLLED = :NEW.TIME_ENROLLED
        WHERE S_ID = :OLD.S_ID;
      
      --UPDATING STUDENT WHEN F_ID WAS CHANGED
      ELSIF :OLD.F_ID != :NEW.F_ID THEN
      
        OLD_ACTION := DECIDE_ACTION('OLD', :OLD.F_ID);
        NEW_ACTION := DECIDE_ACTION('NEW', :NEW.F_ID);
      
        --WHEN THE OLD F_ID HAS MORE THAN 1 RECORD THE CURRENT STUDENT RECORD
        --AND F_ID SHOULD BE DELETED 
        IF OLD_ACTION = 'DELETE' THEN
          DELETE FROM MLMV WHERE F_ID = :OLD.F_ID AND S_ID = :OLD.S_ID;
        --WHEN THE FACULTY HAD ONE STUDENT TO TUTOR AND NOW HAS ZERO THE
        --FIELDS RELATED TO STUDENT SHOULD BE NULL
        ELSIF OLD_ACTION = 'MAKE_NULL' THEN
          MAKE_NULL_ROW(:OLD.F_ID, :OLD.S_ID);
        END IF;
        
        
        --OCCURS WHEN A FACULTY THAT HAD ZERO STUDENTS, NOW HAS 1
        IF NEW_ACTION = 'UPDATE' THEN 
           UPDATE MLMV
            SET S_ID = :NEW.S_ID,
                S_LAST = :NEW.S_LAST,
                S_FIRST = :NEW.S_FIRST,
                S_MI = :NEW.S_MI,
                S_ADDRESS = :NEW.S_ADDRESS,
                S_CITY = :NEW.S_CITY,
                S_STATE = :NEW.S_STATE,
                S_ZIP = :NEW.S_ZIP,
                S_PHONE = :NEW.S_PHONE,
                S_CLASS = :NEW.S_CLASS,
                S_DOB = :NEW.S_DOB,
                S_PIN = :NEW.S_PIN,
                TIME_ENROLLED = :NEW.TIME_ENROLLED
            WHERE F_ID = :NEW.F_ID;
        --HAPPENS WHEN A FACULTY HAS MORE THAT 0 STUDENTS TO TUTOR
        ELSIF NEW_ACTION = 'INSERT' THEN
         INSERT INTO MLMV
            VALUES(CUR_ROW.F_ID, CUR_ROW.F_LAST, CUR_ROW.F_FIRST, CUR_ROW.F_MI, CUR_ROW.LOC_ID,
              CUR_ROW.F_PHONE, CUR_ROW.F_RANK, CUR_ROW.F_SUPER, CUR_ROW.F_PIN,
              :NEW.S_ID, :NEW.S_LAST, :NEW.S_FIRST, :NEW.S_MI, :NEW.S_ADDRESS,
              :NEW.S_CITY, :NEW.S_STATE, :NEW.S_ZIP, :NEW.S_PHONE, :NEW.S_CLASS,
              :NEW.S_DOB, :NEW.S_PIN, :NEW.TIME_ENROLLED);
        END IF;
      

 
      END IF;
      CLOSE CUR;
    
    
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred. UPDATE_AFTER_STUDENT');
END;
/



--DELETE
CREATE OR REPLACE TRIGGER DELETE_AFTER_STUDENT
AFTER DELETE ON STUDENT
FOR EACH ROW
DECLARE
    CURSOR CUR(FACULTY_ID IN INTEGER) IS
      SELECT * FROM FACULTY WHERE F_ID = FACULTY_ID;
    CUR_ROW CUR%ROWTYPE;
    
    OLD_ACTION VARCHAR2(10) := '';
BEGIN

    OPEN CUR(:OLD.F_ID);
    FETCH CUR INTO CUR_ROW; 

    OLD_ACTION := DECIDE_ACTION('OLD', :OLD.F_ID);

    --WHEN THE OLD F_ID HAS MORE THAN 1 RECORD THE CURRENT STUDENT RECORD
    --AND F_ID SHOULD BE DELETED 
    IF OLD_ACTION = 'DELETE' THEN
      DELETE FROM MLMV WHERE F_ID = :OLD.F_ID AND S_ID = :OLD.S_ID;
    --WHEN THE FACULTY HAD ONE STUDENT TO TUTOR AND NOW HAS ZERO THE
    --FIELDS RELATED TO STUDENT SHOULD BE NULL
    ELSIF OLD_ACTION = 'MAKE_NULL' THEN
      MAKE_NULL_ROW(:OLD.F_ID, :OLD.S_ID);
    END IF;

    
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred. DELETE_AFTER_STUDENT');
END;




--WHEN AN OLD F_ID WAS LEFT WITHOUT ANY STUDENT TO TUTOR MUST BE MAKE NULL ALL
--STUDENT RELATED FIELDS 
CREATE OR REPLACE PROCEDURE MAKE_NULL_ROW(F_ID_IN IN INTEGER, 
  S_ID_IN IN VARCHAR2)
IS
   CURSOR CUR(FACULTY_ID IN INTEGER) IS
      SELECT * FROM FACULTY WHERE F_ID = FACULTY_ID;
    CUR_ROW CUR%ROWTYPE;
BEGIN
  
   DELETE FROM MLMV WHERE F_ID = F_ID_IN AND S_ID = S_ID_IN;
   
   OPEN CUR(F_ID_IN);
   FETCH CUR INTO CUR_ROW;
  
   INSERT INTO MLMV
    VALUES(CUR_ROW.F_ID, CUR_ROW.F_LAST, CUR_ROW.F_FIRST, CUR_ROW.F_MI, CUR_ROW.LOC_ID,
      CUR_ROW.F_PHONE, CUR_ROW.F_RANK, CUR_ROW.F_SUPER, CUR_ROW.F_PIN,
      NULL, NULL, NULL, NULL, NULL,
      NULL, NULL, NULL, NULL, NULL,
      NULL, NULL, NULL);
  
  CLOSE CUR;
  
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred. MAKE_NULL_ROW()');
END;




--FUNCTION THAT DECIDES WHAT TO DO BASED ON THE AMOUNT OF RECORDS AND IF
--THE ONE ASKING IS A NEW ELEMENT OR AN OLD ELEMENT
CREATE OR REPLACE FUNCTION DECIDE_ACTION(INFO_ID_IN IN VARCHAR2, FACULTY_ID_IN IN INTEGER)
  RETURN VARCHAR2
IS
  RESULT VARCHAR2(10) := 0;
  ROWS_IN_MLMV INTEGER := 0;
BEGIN
    ROWS_IN_MLMV := FACULTY_STUDENTS(FACULTY_ID_IN);
    
    --OLD VALUES ARE GETTING REMOVED FROM MLMV
    IF INFO_ID_IN = 'OLD' THEN
      IF ROWS_IN_MLMV > 1 THEN
        RESULT := 'DELETE';
      ELSIF ROWS_IN_MLMV = 1 THEN 
        RESULT := 'MAKE_NULL';
      --IF OLD HAS ZERO INSTANCE NOTHING NEEDS TO BE DONE 
      END IF;
       
    --NEW VALUES ARE GETTING ADDED THEN TO MLMV
    ELSIF INFO_ID_IN = 'NEW' THEN
      IF ROWS_IN_MLMV > 0 THEN
        RESULT := 'INSERT';
      ELSIF ROWS_IN_MLMV = 0 THEN 
        RESULT := 'UPDATE';
      END IF;
    END IF;
   
  RETURN RESULT;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred. DECIDE_ACTION()');
    RETURN RESULT;
END;


--FUNCTION THAT TELL HOW MANY ROWS ARE IN MLMV FOR A PARTICULAR FACULTY
CREATE OR REPLACE FUNCTION FACULTY_STUDENTS(FACULTY_ID_IN IN INTEGER)
  RETURN INTEGER
IS
  RESULT INTEGER := 0;
  CURSOR CUR_MV(FACULTY_ID IN INTEGER) IS
      SELECT * FROM MLMV WHERE F_ID = FACULTY_ID;
  CUR_MV_ROW CUR_MV%ROWTYPE;
  LOCAL_S_ID MLMV.S_ID%TYPE := '100';
  ROW_COUNTER INTEGER := 0;
BEGIN
  
  OPEN CUR_MV(FACULTY_ID_IN);
  
    LOOP 
      FETCH CUR_MV INTO CUR_MV_ROW;
      EXIT WHEN CUR_MV%NOTFOUND;
      ROW_COUNTER := ROW_COUNTER + 1;
      LOCAL_S_ID := CUR_MV_ROW.S_ID;
    END LOOP;
    
    --IF IS ONLY ONE
    IF ROW_COUNTER = 1 THEN
      --IF IS NULL THEN HAS ZERO ROWS THERE 
      IF LOCAL_S_ID IS NULL OR LOCAL_S_ID = '100' THEN
        RESULT := 0;
      --IF IS NOT THEN IS 1  
      ELSE
        RESULT := 1;
      END IF;
        
    --IF ROW COUNT IS MORE THAN 1 THEN JUST RETURN THAT AMOUNT  
    ELSE
      RESULT := ROW_COUNTER;
    END IF;
   
  CLOSE CUR_MV;
   

  RETURN RESULT;
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred. FACULTY_STUDENTS()');
    RETURN RESULT;
END;




--PRINT SCREEN 
CREATE OR REPLACE PROCEDURE PRINT_SCREEN
IS
   CURSOR CUR IS
      SELECT * FROM MLMV ORDER BY F_LAST;
    CUR_ROW CUR%ROWTYPE;
BEGIN

  DBMS_OUTPUT.PUT_LINE(' ');
  DBMS_OUTPUT.PUT_LINE('F_ID ' ||  RPAD('F_LAST', 10) || RPAD('F_LAST', 10) 
    || RPAD('S_ID', 8) || RPAD('S_LAST', 10) || 'S_LAST');
  DBMS_OUTPUT.PUT_LINE('======================================================');
  
  OPEN CUR;
  LOOP
    FETCH CUR INTO CUR_ROW;
    EXIT WHEN CUR%NOTFOUND;
    DBMS_OUTPUT.PUT_LINE(RPAD(CUR_ROW.F_ID, 5)  || RPAD(CUR_ROW.F_LAST, 10) || RPAD(CUR_ROW.F_FIRST, 10) 
      || RPAD(COALESCE(CUR_ROW.S_ID, 'null'), 10) || RPAD(COALESCE(CUR_ROW.S_LAST, 'null'), 10) || COALESCE(CUR_ROW.S_FIRST, 'null'));
  
  END LOOP;
  CLOSE CUR;
  
  DBMS_OUTPUT.PUT_LINE(' ');
   
EXCEPTION
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred. PRINT_SCREEN()');
END;