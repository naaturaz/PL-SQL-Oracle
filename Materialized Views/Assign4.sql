--A4
--MANUEL LOPEZ

SELECT * 
FROM faculty f LEFT OUTER JOIN student s ON(f.f_id = s.f_id);

INSERT INTO FACULTY VALUES(7, 'Cuco2', 'Azul2', 'A', 9, 4014014011, 'Full', 1,
  6060, NULL);
  
INSERT INTO student VALUES
('KO101', 'Jones2', 'Tammy2', 'R', '1817 Eagleridge Circle', 'Tallahassee', 
'FL', '32811', '7155559876', 'SR', TO_DATE('07/14/1985', 'MM/DD/YYYY'), 8891, 1, TO_YMINTERVAL('3-2')); 

INSERT INTO student VALUES
('KO104', 'Cuco Stu2', 'Tammy3', 'R', '1817 Eagleridge Circle', 'Tallahassee', 
'FL', '32811', '7155559876', 'SR', TO_DATE('07/14/1985', 'MM/DD/YYYY'), 8891, 6, TO_YMINTERVAL('3-2')); 
  

SELECT * FROM FACULTY;
SELECT * FROM STUDENT;

SELECT * FROM MLMV;
--ASK ABT THE TABLE CREATION 
DROP TABLE MLMV;

CREATE TABLE MLMV AS (
SELECT F.F_ID, F.F_LAST, F.F_FIRST, F.F_MI, LOC_ID, F_PHONE, F_RANK, F_SUPER, F_PIN, S_ID, S_LAST, S_FIRST, S_MI, 
S_ADDRESS, S_CITY, S_STATE, S_ZIP, S_PHONE, S.S_CLASS, S.S_DOB, S_PIN, S.TIME_ENROLLED
FROM FACULTY F LEFT OUTER JOIN STUDENT S ON(F.F_ID = S.F_ID));


--TRIGGERS FACULTY TABLE
--INSERT
CREATE OR REPLACE TRIGGER INSERT_AFTER_FACULTY
AFTER INSERT ON FACULTY
FOR EACH ROW
--declare
BEGIN
    INSERT INTO MLMV
    VALUES(:NEW.F_ID, :NEW.F_LAST, :NEW.F_FIRST, :NEW.F_MI, :NEW.LOC_ID,
      :NEW.F_PHONE, :NEW.F_RANK, :NEW.F_SUPER, :NEW.F_PIN,
      NULL, NULL, NULL, NULL, NULL,
      NULL, NULL, NULL, NULL, NULL,
      NULL, NULL, NULL);
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No data found. INSERT_AFTER_FACULTY');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred. INSERT_AFTER_FACULTY');
END;
--UPDATE


--DELETE




--TRIGGERS STUDENT TABLE
--INSERT
DROP TRIGGER INSERT_AFTER_STUDENT;

CREATE OR REPLACE TRIGGER INSERT_AFTER_STUDENT
AFTER INSERT ON STUDENT
FOR EACH ROW
DECLARE
    CURSOR CUR(FACULTY_ID IN INTEGER) IS
      SELECT * FROM FACULTY WHERE F_ID = FACULTY_ID;
    CUR_ROW CUR%ROWTYPE;
    
    CURSOR CUR_MV(FACULTY_ID IN INTEGER) IS
      SELECT * FROM MLMV WHERE F_ID = FACULTY_ID;
    CUR_MV_ROW CUR_MV%ROWTYPE;  
      
BEGIN

  OPEN CUR(:NEW.F_ID);
      FETCH CUR INTO CUR_ROW;
      --MEANS FOUND A MATCH IN FACULTY 
      IF CUR%FOUND THEN

      
          --IF HAS A NULL S_ID IN THE ROW MEANS DIDNT HAVE STUDENT THEN 
          --NEED TO REMOVE THAT ROW 
          OPEN CUR_MV(:NEW.F_ID);
            FETCH CUR_MV INTO CUR_MV_ROW;
            
              --IF THE S_ID IS NULL MEANS WAS A TEACHER WITHOUT STUDENT TO TUTOR
              IF CUR_MV_ROW.S_ID IS NULL THEN
                DELETE FROM MLMV WHERE F_ID = :NEW.F_ID;
              END IF;
            
          CLOSE CUR_MV;  


        INSERT INTO MLMV
        VALUES(CUR_ROW.F_ID, CUR_ROW.F_LAST, CUR_ROW.F_FIRST, CUR_ROW.F_MI, CUR_ROW.LOC_ID,
          CUR_ROW.F_PHONE, CUR_ROW.F_RANK, CUR_ROW.F_SUPER, CUR_ROW.F_PIN,
          :NEW.S_ID, :NEW.S_LAST, :NEW.S_FIRST, :NEW.S_MI, :NEW.S_ADDRESS,
          :NEW.S_CITY, :NEW.S_STATE, :NEW.S_ZIP, :NEW.S_PHONE, :NEW.S_CLASS,
          :NEW.S_DOB, :NEW.S_PIN, :NEW.TIME_ENROLLED);
      
      END IF;
  CLOSE CUR;
      
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE('No data found. INSERT_AFTER_STUDENT');
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred. INSERT_AFTER_STUDENT');
END;
--UPDATE


--DELETE