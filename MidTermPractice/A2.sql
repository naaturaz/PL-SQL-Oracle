--A2

--T1
--A
SELECT * FROM VIDEODB.ITEM;
SELECT * FROM VIDEODB.COMMON_LOOKUP;
SELECT * FROM VIDEODB.RENTAL;
SELECT * FROM VIDEODB.RENTAL_ITEM;





DECLARE
  CONTACT_ID VIDEODB.CONTACT.CONTACT_ID%TYPE;
   FNAME VIDEODB.CONTACT.FIRST_NAME%TYPE;
   LNAME VIDEODB.CONTACT.LAST_NAME%TYPE;
   SUMA VIDEODB.RENTAL_ITEM.RENTAL_ITEM_PRICE%TYPE;

  TTL INTEGER := 0;
   CURSOR CUR IS
      

        SELECT CONTACT_ID, FIRST_NAME, LAST_NAME, SUM(RENTAL_ITEM_PRICE) SUMA
        FROM VIDEODB.CONTACT CO INNER JOIN (
        
        SELECT CUSTOMER_ID, RENTAL_ITEM_PRICE FROM (
        
        SELECT * FROM VIDEODB.RENTAL R INNER JOIN VIDEODB.RENTAL_ITEM RI 
        ON(R.RENTAL_ID = RI.RENTAL_ID)
        WHERE 
        CHECK_OUT_DATE > TO_DATE('30-JUN-11','DD-MON-YY') AND 
        CHECK_OUT_DATE < TO_DATE('01-SEP-11','DD-MON-YY')) DATES INNER JOIN (
        
        SELECT ITEM.ITEM_ID FROM VIDEODB.ITEM ITEM INNER JOIN  (
        SELECT ITEM_ID FROM VIDEODB.ITEM IT WHERE ITEM_TYPE = GETITEMCODE('XBOX')) 
        XBOX ON (ITEM.ITEM_ID = XBOX.ITEM_ID)
        WHERE ITEM.ITEM_RATING = 'PG-13' OR
           ITEM.ITEM_RATING = 'T') ITEMS 
           
           
        ON(DATES.ITEM_ID = ITEMS.ITEM_ID)) ITRENT 
        
        ON (CO.CONTACT_ID = ITRENT.CUSTOMER_ID) 
        Group by  CONTACT_ID, FIRST_NAME, LAST_NAME
        ORDER BY SUMA DESC;
  
BEGIN
  OPEN CUR;
  LOOP
    FETCH CUR INTO CONTACT_ID, FNAME, LNAME, SUMA;
    EXIT WHEN CUR%NOTFOUND;
    
    SYS.DBMS_OUTPUT.PUT_LINE(FNAME);
    
    TTL := TTL + SUMA;

  END LOOP;
  CLOSE CUR;
  DBMS_OUTPUT.PUT_LINE(TTL);
  
END;






DECLARE 
  RES VARCHAR2(30) := GETRATINGCODE('PG-13');
BEGIN
  DBMS_OUTPUT.PUT_LINE(RES);
END;








--
CREATE OR REPLACE FUNCTION GETRATINGCODE(DESC_IN IN VARCHAR2)
  RETURN INTEGER
IS
  RESULT INTEGER := 0;
BEGIN
  SELECT ITEM_TYPE INTO RESULT FROM VIDEODB.ITEM WHERE 
  ITEM_RATING = DESC_IN;

  RETURN RESULT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE ('Value: ' || DESC_IN || ' not found');
    RETURN RESULT;
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred.');
    RETURN RESULT;
END;




--
SELECT COMMON_LOOKUP_ID FROM VIDEODB.COMMON_LOOKUP WHERE COMMON_LOOKUP_TYPE = 'XBOX';


CREATE OR REPLACE FUNCTION GETITEMCODE(DESC_IN IN VARCHAR2)
  RETURN INTEGER
IS
  RESULT INTEGER := 0;
BEGIN
  SELECT COMMON_LOOKUP_ID INTO RESULT FROM VIDEODB.COMMON_LOOKUP WHERE 
  COMMON_LOOKUP_TYPE = DESC_IN;

  RETURN RESULT;
EXCEPTION
  WHEN NO_DATA_FOUND THEN
    DBMS_OUTPUT.PUT_LINE ('Value: ' || DESC_IN || ' not found');
    RETURN RESULT;
  WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE('Unknown error ocurred.');
    RETURN RESULT;
END;







--B







DECLARE
    
   FNAME VIDEODB.CONTACT.FIRST_NAME%TYPE;
   LNAME VIDEODB.CONTACT.LAST_NAME%TYPE;
   STREET_ADDRESS VIDEODB.STREET_ADDRESS.STREET_ADDRESS%TYPE;
   CITY  VIDEODB.ADDRESS.CITY%TYPE;
   STATEPROV VIDEODB.ADDRESS.STATE_PROVINCE%TYPE;
   
  CURSOR CUR IS 
      SELECT FIRST_NAME, LAST_NAME, STREET_ADDRESS, CITY, STATE_PROVINCE FROM (
      SELECT A.CONTACT_ID, SA.STREET_ADDRESS, A.CITY, A.STATE_PROVINCE FROM VIDEODB.ADDRESS A INNER JOIN 
      
       VIDEODB.STREET_ADDRESS SA ON (SA.ADDRESS_ID = A.ADDRESS_ID) 
       WHERE SA.LINE_NUMBER = 1) ADDR INNER JOIN (
      
      
      
      
      
      SELECT CONTACT_ID, FIRST_NAME, LAST_NAME FROM VIDEODB.CONTACT CO INNER JOIN (
      
      SELECT * FROM VIDEODB.RENTAL RENT INNER JOIN (
        
      SELECT * FROM  VIDEODB.RENTAL_ITEM RE INNER JOIN (
      
      SELECT * FROM VIDEODB.ITEM IT INNER JOIN (
      
      SELECT * FROM VIDEODB.COMMON_LOOKUP WHERE COMMON_LOOKUP_TYPE LIKE '%DVD%') COMM
      ON (IT.ITEM_TYPE = COMM.COMMON_LOOKUP_ID)
      
      WHERE ITEM_RATING = 'T' OR ITEM_RATING = 'PG-13') ITEMS 
      ON(RE.ITEM_ID = ITEMS.ITEM_ID)) ITEMSALL 
      ON (ITEMSALL.RENTAL_ID = RENT.RENTAL_ID)
      
           WHERE CHECK_OUT_DATE > TO_DATE('30-JUN-11','DD-MON-YY') AND 
              CHECK_OUT_DATE < TO_DATE('01-SEP-11','DD-MON-YY')) ALLR 
              ON(CO.CONTACT_ID = ALLR.CUSTOMER_ID)
              GROUP BY CO.CONTACT_ID ,FIRST_NAME, LAST_NAME
              ORDER BY CO.CONTACT_ID ASC
              ) PEOPLE ON
              (ADDR.CONTACT_ID = PEOPLE.CONTACT_ID);
BEGIN
  OPEN CUR;
    LOOP
      FETCH CUR INTO FNAME, LNAME, STREET_ADDRESS, CITY, STATEPROV;
      EXIT WHEN CUR%NOTFOUND;
    
      DBMS_OUTPUT.PUT_LINE(FNAME);
  
    END LOOP;
  CLOSE CUR;
END;

--T2


DECLARE 
  CURSOR CUST IS



  SELECT ADDR.CONTACT_ID, FIRST_NAME, LAST_NAME, STREET_ADDRESS, CITY, STATE_PROVINCE FROM (
      SELECT A.CONTACT_ID, SA.STREET_ADDRESS, A.CITY, A.STATE_PROVINCE FROM VIDEODB.ADDRESS A INNER JOIN 
      
       VIDEODB.STREET_ADDRESS SA ON (SA.ADDRESS_ID = A.ADDRESS_ID) 
       WHERE SA.LINE_NUMBER = 1) ADDR INNER JOIN (

      SELECT CONTACT_ID, FIRST_NAME, LAST_NAME FROM VIDEODB.CONTACT CO INNER JOIN (
      
      SELECT * FROM VIDEODB.RENTAL RENT INNER JOIN (
        
      SELECT * FROM  VIDEODB.RENTAL_ITEM RE INNER JOIN (
      
      SELECT * FROM VIDEODB.ITEM IT INNER JOIN (
      
      SELECT * FROM VIDEODB.COMMON_LOOKUP WHERE COMMON_LOOKUP_TYPE LIKE '%GAMECUBE%' or
       COMMON_LOOKUP_TYPE LIKE '%XBOX%') COMM
      ON (IT.ITEM_TYPE = COMM.COMMON_LOOKUP_ID)
      
      ) ITEMS 
      ON(RE.ITEM_ID = ITEMS.ITEM_ID)) ITEMSALL 
      ON (ITEMSALL.RENTAL_ID = RENT.RENTAL_ID)
      
           WHERE CHECK_OUT_DATE > TO_DATE('31-MAY-11','DD-MON-YY') AND 
              CHECK_OUT_DATE < TO_DATE('01-JUL-11','DD-MON-YY')) ALLR 
              ON(CO.CONTACT_ID = ALLR.CUSTOMER_ID)
              GROUP BY CO.CONTACT_ID ,FIRST_NAME, LAST_NAME
              ORDER BY CO.CONTACT_ID ASC
              ) PEOPLE ON
              (ADDR.CONTACT_ID = PEOPLE.CONTACT_ID);



  CUST_ROW CUST%ROWTYPE;

  CURSOR ITEM IS


    
      SELECT CUSTOMER_ID, RENT.CHECK_OUT_DATE, ITEM_TITLE, COMMON_LOOKUP_MEANING FROM VIDEODB.RENTAL RENT INNER JOIN (
        
      SELECT * FROM  VIDEODB.RENTAL_ITEM RE INNER JOIN (
      
      SELECT * FROM VIDEODB.ITEM IT INNER JOIN (
      
      SELECT * FROM VIDEODB.COMMON_LOOKUP WHERE COMMON_LOOKUP_TYPE LIKE '%GAMECUBE%' or
       COMMON_LOOKUP_TYPE LIKE '%XBOX%') COMM
      ON (IT.ITEM_TYPE = COMM.COMMON_LOOKUP_ID)
       
      )
     
      ITEMS 
      ON(RE.ITEM_ID = ITEMS.ITEM_ID))  ITEMSALL 
      ON (ITEMSALL.RENTAL_ID = RENT.RENTAL_ID)
      
           WHERE CHECK_OUT_DATE > TO_DATE('31-MAY-11','DD-MON-YY') AND 
              CHECK_OUT_DATE < TO_DATE('01-JUL-11','DD-MON-YY')
              
              ;
              
      ITEM_ROW ITEM%ROWTYPE;
BEGIN 
  OPEN CUST;
    LOOP 
      FETCH CUST INTO CUST_ROW;
      EXIT WHEN CUST%NOTFOUND;
      DBMS_OUTPUT.PUT_LINE(CUST_ROW.FIRST_NAME);
      
      
        OPEN ITEM;
          LOOP
            FETCH ITEM INTO ITEM_ROW;
            EXIT WHEN ITEM%NOTFOUND;
            
              IF CUST_ROW.CONTACT_ID = ITEM_ROW.CUSTOMER_ID THEN
              
            
                DBMS_OUTPUT.PUT_LINE(ITEM_ROW.ITEM_TITLE);
                
                IF ITEM%rowcount > 2 THEN
                DBMS_OUTPUT.put_line('+2');
                END IF;
                
                --DBMS_OUTPUT.put_line(' ' || ITEM%FOUND||' ' || ITEM%ROWCOUNT ||' ' || ITEM%ISOPEN);
             
             END IF;
        
          END LOOP;
        CLOSE ITEM;
      
      

    END LOOP;
  CLOSE CUST;
END;
  
  
  --

  
  
  
  
  
            

--
SELECT RENTAL_ITEM_ID, SUM(RENTAL_ITEM_PRICE) SUMA FROM VIDEODB.RENTAL_ITEM
GROUP BY RENTAL_ITEM_ID HAVING SUM(RENTAL_ITEM_PRICE) > 5;


SELECT LASTNAME, NVL2(SCHOOL,'SMART', 'DUMB')  FROM LEAGUEDB.PLAYER;

SELECT LASTNAME, COALESCE(SCHOOL, 'DUMB')  FROM LEAGUEDB.PLAYER;

SELECT LASTNAME, UPPER(SCHOOL), LOWER(SCHOOL)  FROM LEAGUEDB.PLAYER;



DECLARE
BEGIN

FOR rec in (SELECT LASTNAME FROM LEAGUEDB.PLAYER) LOOP
  dbms_output.put_line(rec.LASTNAME);
end loop;

END;

SELECT 'AZU' FROM (SELECT 'AZUU' FROM DUAL);

CREATE VIEW VEMP_RES (RESUME)
	AS SELECT 'Delores M. Quintana' FROM DUAL;

SELECT LASTNAME, ITEM_ID FROM LEAGUEDB.PLAYER, VIDEODB.ITEM;


SELECT LASTNAME FROM 
LEAGUEDB.PLAYER P, LEAGUEDB.PLAYERSTATS S
WHERE P.PLAYERID = S.PLAYER and lastNAME != 'Eller';




